---
- name: Generate Certificate to be signed by an authority like FreeIpa
  when:
    - secure_registry is defined and secure_registry | bool
    - not generate_selfsigned_registry_certfiles is defined or (generate_selfsigned_registry_certfiles is defined and not generate_selfsigned_registry_certfiles | bool)
    - ipa_server is defined and not dns_servers == ''
    - ipa_admin is defined and not dns_servers == ''
    - ipa_password is defined and not dns_servers == ''
  block:
    - name: Generate Private Key
      openssl_privatekey:
        path: "{{ registry_certs_dir }}/{{ registry_certkeyfile }}"
        size: 4096
        cipher: aes256
        type: RSA
    - name: Generate The CSR for the certificate
      openssl_csr:
        path: "{{ registry_certs_dir }}/{{ registry_certcsrfile }}"
        privatekey_path: "{{ registry_certs_dir }}/{{ registry_certkeyfile }}"
        country_name: "{{ cert_country }}"
        locality_name: "{{ cert_locality }}"
        organization_name: "{{ cert_org }}"
        organizational_unit_name: "{{ cert_org_unit }}"
        common_name: "{{ registry_host_fqdn }}"
        key_usage:
          - digitalSignature
          - keyAgreement
        extended_key_usage:
          - clientAuth
    ### See if this can be refactored later
    - name: Generate Signed certificate from IPA
      shell: "echo {{ipa_password}} | kinit {{ipa_admin}};/usr/bin/ipa cert-request {{registry_certs_dir}}/{{registry_certcsrfile}} --add --principal HOST/{{registry_host_fqdn}} --certificate-out={{registry_certs_dir}}/{{registry_certfile}}"
      no_log: true
      register: certificate_generated
    - name: Pull CA Cert from IPA Server
      get_url:
        url: "http://{{ipa_server}}/ipa/config/ca.crt"
        dest: "{{ registry_certs_dir }}/{{ registry_ca_certfile }}"
        
- name: Generate Self signed certificate
  when:
    - secure_registry is defined and secure_registry | bool
    - generate_selfsigned_registry_certfiles is defined and generate_selfsigned_registry_certfiles | bool
  block:
    - name: Generate Private Key for Self Signed CA
      openssl_privatekey:
        path: "{{ registry_certs_dir }}/{{ registry_ca_keyfile }}"
        size: 4096
        type: RSA

    - name: Generate The CSR for the CA certificate
      openssl_csr:
        path: "{{ registry_certs_dir }}/{{ registry_ca_csrfile }}"
        privatekey_path: "{{ registry_certs_dir }}/{{ registry_ca_keyfile }}"
        common_name: "{{ registry_host_fqdn }}-CA"
        country_name: "{{ cert_country }}"
        locality_name: "{{ cert_locality }}"
        state_or_province_name: "{{ cert_state }}"
        organization_name: "{{ cert_org }}"
        organizational_unit_name: "{{ cert_org_unit }}"
        basic_constraints:
          - CA:TRUE

    - name: Generate Self signed CA certificate
      openssl_certificate:
        path: "{{ registry_certs_dir }}/{{ registry_ca_certfile }}"
        privatekey_path: "{{ registry_certs_dir }}/{{ registry_ca_keyfile }}"
        csr_path: "{{ registry_certs_dir }}/{{ registry_ca_csrfile }}"
        provider: selfsigned
        key_usage:
          - critical 
          - keyCertSign
          - cRLSign
        key_usage_strict: true
      
    - name: Generate Private Key for the registry certificate 
      openssl_privatekey:
        path: "{{ registry_certs_dir }}/{{ registry_certkeyfile }}"
        size: 4096
        type: RSA

    - name: Generate The CSR for the registry certificate
      openssl_csr:
        path: "{{ registry_certs_dir }}/{{ registry_certcsrfile }}"
        privatekey_path: "{{ registry_certs_dir }}/{{ registry_certkeyfile }}"
        country_name: "{{ cert_country }}"
        locality_name: "{{ cert_locality }}"
        state_or_province_name: "{{ cert_state }}"
        organization_name: "{{ cert_org }}"
        organizational_unit_name: "{{ cert_org_unit }}"
        common_name: "{{ registry_host_fqdn }}"
        subject_alt_name: "DNS:{{ registry_host_fqdn }}"

    - name: Generate Self signed Registry certificate
      openssl_certificate:
        path: "{{ registry_certs_dir }}/{{ registry_certfile }}"
        csr_path: "{{ registry_certs_dir }}/{{ registry_certcsrfile }}"
        ownca_path: "{{ registry_certs_dir }}/{{ registry_ca_certfile }}"
        ownca_privatekey_path: "{{ registry_certs_dir }}/{{ registry_ca_keyfile }}"
        provider: ownca
      register: selfsigned_cert_created

- name: Check that the CA file was successfully created in one of the steps above
  stat:
    path: "{{ registry_certs_dir }}/{{ registry_ca_certfile | basename }}"
  register: ca_cert_file

- name: Trust the Registry CA Cert from above
  when:
    - ca_cert_file is defined 
    - ca_cert_file.stat.isreg 
  block:
    - name: Copy the Registry CA cert from one of the steps above to the to Cert anchor folder so this host can trust it
      command: "cp {{ registry_certs_dir }}/{{ registry_ca_certfile | basename }} /etc/pki/ca-trust/source/anchors/{{ registry_ca_certfile | basename }}" 
      register: cert_copied
    
    - name: Update Ca DB store to trust downloaded CA from above
      command: update-ca-trust extract
      register: cadb_updated
